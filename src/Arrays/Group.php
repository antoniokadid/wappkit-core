<?php

namespace AntonioKadid\WAPPKitCore\Arrays;

class Group
{
     /** @var array */
     private $array;

     /** @var array */
     private $keySelectors = [];

    /**
     * @param array $array
     */
    private function __construct(array &$array)
    {
        $this->array = &$array;
    }

    /**
     * @param array $array
     *
     * @return Group
     */
    public static function array(array &$array): Group
    {
        return new Group($array);
    }

    /**
     * @param callable $keySelector
     *
     * @return Group
     *
     * @suppressWarnings(PHPMD.ShortMethodName)
     */
    public function by(callable $keySelector): Group
    {
        array_push($this->keySelectors, $keySelector);

        return $this;
    }

    /**
     * @suppressWarnings(PHPMD.ShortMethodName)
     */
    public function go(): void
    {
        $this->array = self::group($this->array, $this->keySelectors);
    }

    /**
     * Group $array based on the keys that are generated by $selectors.
     *
     * @param array      $array
     * @param callable[] $selectors
     *
     * @return array
     */
    private static function group(array $array, array $selectors): array
    {
        $currentSelector = array_shift($selectors);
        if ($currentSelector === null) {
            return $array;
        }

        $result = [];
        foreach ($array as $item) {
            $offset = call_user_func($currentSelector, $item);

            if (!isset($result[$offset])) {
                $result[$offset] = [];
            }

            array_push($result[$offset], $item);
        }

        if (!empty($selectors)) {
            array_walk(
                $result,
                function (&$value) use ($selectors) {
                    $value = self::group($value, $selectors);
                }
            );
        }

        return $result;
    }
}
